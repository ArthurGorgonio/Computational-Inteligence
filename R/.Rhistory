x <- c(1,2,3,4,5,6, nrow=2)
print(x)
x <- matrix(c(1,2,3,4,5,6), nrow = 2)
print(x)
x <- matrix(c(1,2,3,4,5,6), nrow = 2, byrow = FALSE)
print(x)
x <- matrix(c(1,2,3,4,5,6), nrow = 2)
print(x)
x <- matrix(c(1,2,3,4,5,6), nrow = 2, byrow = TRUE)
print(x)
x <- matrix(c(1,2,3,4,5,6), nrow = 3, byrow = TRUE)
print(x)
x <- matrix(c(1,2,3,4,5,6), nrow = 2, byrow = TRUE)
print(x)
w <- c(1,2,3,4,5,6)
y <- active(w, x)
print(x)
print(w)
View(x)
set_weight <- function(x, j, w, learningRate, error){
for (i in w){
w[c(i)] <- w[c(i)] + learningRate * error * x[c(i,j)]
}
return(w)
}
for (i 1:2){
print(i)
}
for (i:2){
print(i)
}
for (i in 1:2){
print(i)
}
setwd("~/Projects/Computational-Inteligence/R/")
data <- c()
col <- c()
row <- c()
w <- c()
x <- c()
error <- 1
learningRate <- 0.1
random_weights <- function(){
return(runif(3,-1,1))
}
set_weight <- function(x, row, w, learningRate, error){
for (i in 1:col) {
w[c(i)] <- w[c(i)] + learningRate * error * x[c((row - 1) * col + i)]
}
return(w)
}
active <- function(x, row, w){
active <- 0
for(i in 1:col){
active <- active + sum(x[c((row - 1) * col + i)] * w[c(i)])
}
if (active > 0)
return(1)
return(0)
}
archive_read <- function(file){
data <- read.csv(file)
return(data)
}
set_col <- function(data){
return(ncol(data) - 1)
}
set_row <- function(data){
return(nrow(data))
}
convert_to_vector <- function(data, row, col){
for(i in 1:row) {
for(j in 1:col) {
x[c(((i - 1) * col) + j)] <- data[i, j]
}
}
return(x)
}
data <- archive_read("or.csv")
row <- set_row(data)
col <- set_col(data)
x <- convert_to_vector(data, row, col)
w <- random_weights()
git
data$class
data
active <- 0
for(i in 1:col){
active <- active + sum(x[c((row - 1) * col + i)] * w[c(i)])
}
if (active > 0)
return(1)
return(0)
active <- 0
for(i in 1:col){
active <- active + sum(x[c((1 - 1) * col + i)] * w[c(i)])
}
if (active > 0)
active <- function(x, row, w){
for(i in 1:col){
active[c(i)] <- active[c(i)] + sum(x[c((1 - 1) * col + i)] * w[c(i)])
}
if (active > 0)
return(1)
return(0)
}
active <- c()
activation <- function(x, row, w){
for(i in 1:col){
active[c(i)] <- active[c(i)] + sum(x[c((1 - 1) * col + i)] * w[c(i)])
}
if (active > 0)
return(1)
return(0)
}
active <- activation(x,1,w)
activation <- function(x, row, w){
for(i in 1:col){
active[c(i)] <- active[c(i)] + sum(x[c((1 - 1) * col + i)] * w[c(i)])
if (active > 0){
active[i] <- 1
} else{
active[i] <- 0
}
}
return(active)
}
active <- activation(x,1,w)
activation <- function(x, row, w){
for(i in 1:col){
active[c(i)] <- active[c(i)] + sum(x[c((1 - 1) * col + i)] * w[c(i)])
if (active[i] > 0){
active[i] <- 1
} else{
active[i] <- 0
}
}
return(active)
}
active <- activation(x,1,w)
activation <- function(x, row, w){
for(i in 1:col){
active[c(i)] <- active[c(i)] + sum(x[c((1 - 1) * col + i)] * w[c(i)])
if (active[c(i)] > 0){
active[c(i)] <- 1
} else{
active[c(i)] <- 0
}
}
return(active)
}
active <- activation(x,1,w)
active <- function(x, row, w){
active <- 0
for(i in 1:col){
active <- active + sum(x[c((1 - 1) * col + i)] * w[c(i)])
}
if (active > 0)
return(1)
return(0)
}
perceptron_output <- c()
perceptron_output[c(i)] <- active(x, row, w)
for(i in 1:row){
perceptron_output[c(i)] <- active(x, row, w)
if(perceptron_output){
}
}
perceptron_output <- c()
for(i in 1:row){
perceptron_output[c(i)] <- active(x, row, w)
# if(perceptron_output){
#
# }
#
}
training <- function(data, x, w, error){
perceptron_output <- c()
learning <- TRUE
while(learning){
for(i in 1:row){
perceptron_output[c(i)] <- active(x, row, w)
if(perceptron_output == data$class){
}
}
}
}
perceptron_output <- c()
for(i in 1:row){
perceptron_output[c(i)] <- active(x, row, w)
if(perceptron_output == data$class){
}
}
perceptron_output <- c()
for(i in 1:row){
perceptron_output[c(i)] <- active(x, row, w)
if(perceptron_output == data$class){
print("alfa")
}else{
print("beta")
}
}
perceptron_output <- c()
for(i in 1:row){
perceptron_output[c(i)] <- active(x, row, w)
if(perceptron_output[c(i)] == data$class[c(i)]){
print("alfa")
}else{
print("beta")
}
}
